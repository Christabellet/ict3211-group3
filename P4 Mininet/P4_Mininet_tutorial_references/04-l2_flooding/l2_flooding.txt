(2) (3) (5) 
control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    action drop() {
        mark_to_drop(standard_metadata);
    }
	// TODO 2: define a forwarding match-action table like the one from the previous exercise. This time you can remove the broadcast action, or make it empty. 
    action forward(bit<9> egress_port) {
	
        standard_metadata.egress_spec = egress_port;
    }

    action broadcast() {
        //Empty action that was not necessary, we just call it when there is a table miss
    }
	
    table dmac {
        key = {
            hdr.ethernet.dstAddr: exact;
        }
        actions = {
            forward;
            broadcast;
            NoAction;
        }
        size = 256;
        default_action = NoAction;
    }
	// TODO 2 END 
	
	// TODO 3: define a new match-action table that matches to the ingress_port and calls an action to set the multicast group
    action set_mcast_grp(bit<16> mcast_grp) {
        standard_metadata.mcast_grp = mcast_grp;
    }

    table select_mcast_grp {
        key = {
            standard_metadata.ingress_port : exact;
        }
        actions = {
            set_mcast_grp;
            NoAction;
        }
        size = 32;
        default_action =  NoAction;
    }
	// TODO 3 END
	
	// TODO 5: Build your control logic: apply the normal forwarding table, if there is a miss apply the second table to set the multicast group.
    apply {
        switch (dmac.apply().action_run) {
            broadcast: {
                select_mcast_grp.apply();
            }
        }
        /* Alternative Solution (even easier)
        if (dmac.apply().hit){
        }
        else {
            select_mcast_grp.apply();
        }
        End of Alternative solution
        */
    }
}


