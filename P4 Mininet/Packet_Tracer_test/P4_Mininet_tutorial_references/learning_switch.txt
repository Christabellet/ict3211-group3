(2) //TODO 2: define a new header type and name it `cpu_t`
 header cpu_t {
    bit<48> srcAddr;
    bit<16> ingress_port;
}

(3) 
struct metadata {

    bit<9> ingress_port; //TODO 3: define a metadata field to carry the ingress_port with the cloned packet
    /* empty */
}

(4)
struct headers {
    ethernet_t   ethernet;
    cpu_t        cpu; //TODO 4: add cpu header to headers
}

(5) (6) (7) (8) 
control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    action drop() {
        mark_to_drop(standard_metadata);
    }
	
	//TODO 7: Define the smac table and the mac_learn action
    action mac_learn() { 
        meta.ingress_port = standard_metadata.ingress_port;
        clone3(CloneType.I2E, 100, meta);
    }

    table smac {
        key = {
            hdr.ethernet.srcAddr: exact;
        }
        actions = {
            mac_learn;
            NoAction;
        }
        size = 256;
        default_action = mac_learn;
    }
	//TODO 7 END 
	
	//TODO 5: Define the dmac table and forward action
    action forward(bit<9> egress_port) {
        standard_metadata.egress_spec = egress_port;
    }

    table dmac {
        key = {
            hdr.ethernet.dstAddr: exact;
        }
        actions = {
            forward;
            NoAction;
        }
        size = 256;
        default_action = NoAction;
    }
	//TODO 5 END
	
	//TODO 6: Define the broadcast table and the set_mcast_grp action
    action set_mcast_grp(bit<16> mcast_grp) {
        standard_metadata.mcast_grp = mcast_grp;
    }

    table broadcast {
        key = {
            standard_metadata.ingress_port: exact;
        }

        actions = {
            set_mcast_grp;
            NoAction;
        }
        size = 256;
        default_action = NoAction;
    }
	//TODO 6 END
	
    apply {
		// TODO 8: ingress logic, call the 3 tables
        smac.apply();
        if (dmac.apply().hit){
            //
        }
        else {
            broadcast.apply();
        }
    }
}


