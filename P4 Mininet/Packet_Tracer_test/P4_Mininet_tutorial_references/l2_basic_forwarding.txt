(1) // TODO 1: Define ethernet header, metadata and headers struct
typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}

struct metadata {
    /* empty */
}

struct headers {
    ethernet_t   ethernet;
}

(2)
parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        packet.extract(hdr.ethernet); //TODO 2: parse ethernet header
        transition accept;
    }
}

(3) (4) (5)
control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    action drop() {
        mark_to_drop(standard_metadata);
    }

    action forward(bit<9> egress_port) { 
	//TODO 4: define an action to set the egress port
        standard_metadata.egress_spec = egress_port; 
    }

    table dmac {
	// TODO 3: define a l2 forwarding table and define a match to set the egress port
        key = {
            hdr.ethernet.dstAddr: exact;
        }
        actions = {
            forward;
            NoAction;
        }
        size = 256;
        default_action = NoAction;
    }

    apply {
        dmac.apply(); // TODO 5: call the forwarding table
    }
}

(6)
control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        //parsed headers have to be added again into the packet.
        packet.emit(hdr.ethernet); //TODO 6: deparse ethernet header
    }
}

